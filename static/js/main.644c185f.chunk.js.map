{"version":3,"sources":["Autocomplete/Input/index.module.sass","Autocomplete/Suggestions/index.module.sass","Autocomplete/Alert/index.jsx","Autocomplete/Input/index.jsx","Autocomplete/Suggestions/index.jsx","httpService.js","Autocomplete/hooks.js","Autocomplete/services.js","Autocomplete/index.jsx","App/index.jsx","serviceWorker.js","index.jsx","Autocomplete/Alert/index.module.sass"],"names":["module","exports","Alert","type","alertStyle","styles","warning","danger","alertMessage","data-test","className","Input","curlyCorners","inputRef","loading","props","cornersStyle","noCurlyCorners","htmlFor","label","ref","input","Suggestions","suggestions","selectSuggestion","cursor","ulStyle","length","ulExpanded","ulCollapsed","liStyle","index","selectedItem","suggestionsContainer","map","name","id","key","onClick","onKeyDown","tabIndex","role","axios","defaults","baseURL","process","interceptors","response","use","error","status","console","log","Promise","reject","get","useSuggestionsFetcher","query","useState","setSuggestions","setLoading","setError","noSuggestions","setNoSuggestions","setCursor","shouldFetch","setShouldFetch","useEffect","ignore","debounce","a","value","httpService","results","data","fetchSuggestions","Autocompelte","setQuery","showSuggestions","setShowSuggestions","useRef","handleKeyDown","e","keyCode","current","blur","prevCursor","preventDefault","suggestion","window","addEventListener","removeEventListener","placeholder","onFocus","onChange","target","App","Autocomplete","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.644c185f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Input_label__1qy_y\",\"input\":\"Input_input__jFNlj\",\"curlyCorners\":\"Input_curlyCorners__3k_LB\",\"noCurlyCorners\":\"Input_noCurlyCorners__1IlvJ\",\"loading\":\"Input_loading__sijX6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"suggestionsContainer\":\"Suggestions_suggestionsContainer__12ejW\",\"ulExpanded\":\"Suggestions_ulExpanded__11KHb\",\"ulCollapsed\":\"Suggestions_ulCollapsed__3HWOp\",\"selectedItem\":\"Suggestions_selectedItem__3BXHw\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './index.module.sass';\n\nconst Alert = ({ type }) => {\n    const alertStyle =\n        type === 'noSuggestions' ? styles.warning : styles.danger;\n\n    const alertMessage =\n        type === 'noSuggestions'\n            ? 'No suggestions were found.'\n            : 'There was a problem while fetching the characters.';\n\n    return (\n        <div data-test=\"component-alert\" className={alertStyle}>\n            <span data-test=\"alert-message\">{alertMessage}</span>\n        </div>\n    );\n};\n\nAlert.propTypes = {\n    type: PropTypes.string.isRequired\n};\n\nexport default Alert;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './index.module.sass';\n\nconst Input = ({ curlyCorners, inputRef, loading, ...props }) => {\n    const cornersStyle = !curlyCorners\n        ? styles.curlyCorners\n        : styles.noCurlyCorners;\n    return (\n        <form>\n            <label htmlFor=\"search\">\n                <span className={styles.label}>Search</span>\n                <input\n                    {...props}\n                    ref={inputRef}\n                    type=\"text\"\n                    data-test=\"component-input\"\n                    className={`${cornersStyle} ${styles.input} ${\n                        loading ? styles.loading : ''\n                    }`}\n                />\n            </label>\n        </form>\n    );\n};\n\nInput.propTypes = {\n    curlyCorners: PropTypes.bool.isRequired,\n    inputRef: PropTypes.shape({ current: PropTypes.instanceOf(Element) })\n        .isRequired,\n    loading: PropTypes.bool.isRequired\n};\n\nexport default Input;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './index.module.sass';\n\nconst Suggestions = ({ suggestions, selectSuggestion, cursor }) => {\n    const ulStyle = suggestions.length ? styles.ulExpanded : styles.ulCollapsed;\n    const liStyle = index => (cursor === index ? styles.selectedItem : null);\n    return (\n        <div\n            data-test=\"component-suggestions\"\n            className={styles.suggestionsContainer}>\n            <ul className={ulStyle}>\n                {suggestions.map(({ name, id }, index) => (\n                    <li\n                        data-test=\"suggestion-list\"\n                        key={id}\n                        className={liStyle(index)}>\n                        <span\n                            onClick={() => selectSuggestion(name)}\n                            onKeyDown={() => {}}\n                            tabIndex=\"-1\"\n                            role=\"button\">\n                            {name}\n                        </span>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nSuggestions.propTypes = {\n    suggestions: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            name: PropTypes.string.isRequired\n        })\n    ).isRequired,\n    selectSuggestion: PropTypes.func.isRequired,\n    cursor: PropTypes.number.isRequired\n};\n\nexport default Suggestions;\n","import axios from 'axios';\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.response.use(null, error => {\n    const expectedError =\n        error.response &&\n        error.response.status >= 400 &&\n        error.response.status < 500;\n    if (!expectedError) {\n        console.log('Logging the error ', error);\n    }\n    return Promise.reject(error.response);\n});\n\nexport default {\n    get: axios.get\n};\n","import { useState, useEffect } from 'react';\nimport debounce from 'lodash.debounce';\nimport { getCharactersService } from './services';\n\nconst useSuggestionsFetcher = query => {\n    const [suggestions, setSuggestions] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(false);\n    const [noSuggestions, setNoSuggestions] = useState(false);\n    const [cursor, setCursor] = useState(-1);\n    const [shouldFetch, setShouldFetch] = useState(true);\n\n    useEffect(() => {\n        let ignore = false;\n        setShouldFetch(true);\n\n        const fetchSuggestions = debounce(async () => {\n            if (query.length < 2) {\n                setSuggestions([]);\n                setNoSuggestions(false);\n                return;\n            }\n            if (!ignore && shouldFetch) {\n                setError(false);\n                setLoading(true);\n                try {\n                    const {\n                        data: {\n                            data: { results }\n                        }\n                    } = await getCharactersService(query);\n                    setSuggestions(results);\n                    setCursor(-1);\n                    setNoSuggestions(results.length === 0 ? true : false);\n                } catch (err) {\n                    if (err.status !== 200) {\n                        setError(true);\n                    }\n                }\n                setLoading(false);\n            }\n        }, 1000);\n        fetchSuggestions();\n        return () => {\n            ignore = true;\n        };\n    }, [query]);\n\n    return {\n        suggestions,\n        loading,\n        error,\n        cursor,\n        setCursor,\n        noSuggestions,\n        setShouldFetch\n    };\n};\n\nexport default useSuggestionsFetcher;\n","import httpService from '../httpService';\n\nconst apiEndpoint = '/characters';\nconst apiKey = process.env.REACT_APP_API_KEY;\n\n/**\n *\n * @param {string} value - search value term\n */\n\nexport const getCharactersService = value =>\n    httpService.get(\n        `${apiEndpoint}?ts=1&nameStartsWith=${value}&apikey=${apiKey}`\n    );\n","import React, { useState, useRef, useEffect } from 'react';\nimport Alert from './Alert';\nimport Input from './Input';\nimport Suggestions from './Suggestions';\nimport useSuggestionsFetcher from './hooks';\n\nconst Autocompelte = () => {\n    const [query, setQuery] = useState('');\n    const {\n        suggestions,\n        loading,\n        error,\n        cursor,\n        setCursor,\n        noSuggestions,\n        setShouldFetch\n    } = useSuggestionsFetcher(query);\n    const [showSuggestions, setShowSuggestions] = useState(false);\n    const inputRef = useRef(null);\n\n    const selectSuggestion = value => {\n        setShouldFetch(false);\n        setQuery(value);\n        setShowSuggestions(false);\n        setCursor(-1);\n    };\n\n    const handleKeyDown = e => {\n        if (e.keyCode === 27) {\n            setShowSuggestions(false);\n            inputRef.current.blur();\n        } else if (e.keyCode === 38) {\n            setCursor(prevCursor => (cursor > 0 ? prevCursor - 1 : prevCursor));\n        } else if (e.keyCode === 40) {\n            setCursor(prevCursor =>\n                cursor < suggestions.length - 1 ? prevCursor + 1 : prevCursor\n            );\n        } else if (e.keyCode === 13) {\n            e.preventDefault();\n            const suggestion = suggestions[cursor];\n            if (suggestion) {\n                selectSuggestion(suggestion.name);\n                inputRef.current.blur();\n            }\n        }\n    };\n\n    useEffect(() => {\n        window.addEventListener('keydown', handleKeyDown);\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown);\n        };\n    });\n\n    return (\n        <div data-test=\"component-autocomplete\">\n            <Input\n                inputRef={inputRef}\n                value={query}\n                placeholder=\"Search terms\"\n                curlyCorners={suggestions.length > 0 && showSuggestions}\n                loading={loading}\n                onFocus={() => setShowSuggestions(true)}\n                onChange={e => setQuery(e.target.value)}\n            />\n            {showSuggestions && (\n                <Suggestions\n                    suggestions={suggestions}\n                    cursor={cursor}\n                    selectSuggestion={selectSuggestion}\n                />\n            )}\n            <div data-test=\"component-alert\">\n                {error && <Alert type=\"\" />}\n                {noSuggestions && <Alert type=\"noSuggestions\" />}\n            </div>\n        </div>\n    );\n};\n\nexport default Autocompelte;\n","import React from 'react';\nimport Autocomplete from '../Autocomplete';\n\nconst App = () => {\n    return (\n        <div data-test=\"component-app\">\n            <Autocomplete />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"danger\":\"Alert_danger__HoExK\",\"warning\":\"Alert_warning__2pGQ0\"};"],"sourceRoot":""}